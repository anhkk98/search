import 'package:flutter/material.dart';
import 'package:search/search_page.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
        // This makes the visual density adapt to the platform that you run
        // the app on. For desktop platforms, the controls will be smaller and
        // closer together (more dense) than on mobile platforms.
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: HomePage()
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  /// key tìm kiếm nhập ở textfield
  String text;

  Future<void> _showSearch() async {
    final searchText = await showSearch<String>(
      context: context,
      delegate: SearchWithSuggestionDelegate(
        onSearchChanged: _getKeySearchLike,
      ),
    );

    setState(() {
      text = searchText;
    });
    //Save the searchText to SharedPref so that next time you can use them as recent searches.
    await _saveToKeySearch(searchText);

    //Do something with searchText. Note: This is not a result.
  }

  Future<List<String>> _getKeySearchLike(String query) async {
    final pref = await SharedPreferences.getInstance();
    final allSearches = pref.getStringList('keySearch');
    return allSearches.where((search) => search.startsWith(query)).toList();
  }

  Future<void> _saveToKeySearch(String searchText) async {
    /// key search ko đc rỗng
    if (searchText == null) return;
    final pref = await SharedPreferences.getInstance();

    /// sử dụng toSet để kiểm tra tránh trùng lặp keySearch
    var allSearches = pref.getStringList('keySearch')?.toSet() ?? {};

    /// đặt ở vị trí đầu tiên trong list
    allSearches = {searchText, ...allSearches};
    await pref.setStringList('keySearch', allSearches.toList());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Danh sách tìm kiếm'),
        actions: <Widget>[
          IconButton(
            icon: Icon(Icons.search),
            onPressed: _showSearch,
          ),
        ],
      ),
      body: Center(
        child: Text(text ?? 'dữ liệu tìm kiếm ko có'),
      ),
    );
  }
}


